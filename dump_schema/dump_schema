#!/bin/bash

# Function to display usage information
usage() {
    echo "Usage: $0 [options] <environment>"
    echo "Options:"
    echo "  -d, --database <database>  Specify the database name"
    echo "  -h, --help                 Display this help message"
    echo "  -t, --table                Table DDL to dump"
}

# Parse command-line arguments
while [[ $# -gt 0 ]]; do
    case "$1" in
        -d|--database)
            if [[ -z "$2" ]]; then
                echo "Error: --database requires an argument" >&2
                usage
                exit 1
            fi
            DB_NAME="$2"
            shift 2
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        -t|--table)
            if [[ -z "$2" ]]; then
                echo "Error: --table requires an argument" >&2
                usage
                exit 1
            fi
            TABLE="$2"
            shift 2
            ;;
        -*)
            echo "Unknown option: $1" >&2
            usage
            exit 1
            ;;
        *)
            ENV_NAME="$1"
            shift
            ;;
    esac
done

# Get the current directory
OHOME=$(pwd)

# Set the terminal width
COLUMNS=$(tput cols)

# Set this env var to the path of db_provisioner
if [ -z "${DB_PROVISIONER_HOME}" ]; then
    echo "Error: DB_PROVISIONER_HOME environment variable must be set" >&2
    exit 1
fi
cd "${DB_PROVISIONER_HOME}"

# Get environment names and build array efficiently
env_array=()
while IFS= read -r line; do
    [[ -n "$line" ]] && env_array+=("$line")
done < <(grep -h 'environment_name:' "envs/"* | 
        cut -d':' -f2 | 
        sed 's/^ *//g' |
        grep -Ev 'data-compute' |
        sort)

# Function to connect to the environment
connect_to_env() {
    local env="$1"
    echo "Dumping DDL for $env ${DB_NAME}.${TABLE}..."
    export $(poetry run python get_db_creds.py --environment "$env" --user postgres)
    pg_dump="/opt/homebrew/opt/postgresql@16/bin/pg_dump"
    $pg_dump --no-subscriptions -s -d "${DB_NAME}" -t "${TABLE}" | tee "${OHOME}/$env.${DB_NAME}.${TABLE}.sql"
}

# Function to present a menu of environment choices
select_env() {
    PS3="Please select an environment: "
    select env in "${env_array[@]}"; do
        if [[ -n "$env" ]]; then
            echo "You selected: $env"
            ENV_NAME="$env"
            break
        else
            echo "Invalid selection. Please try again."
        fi
    done
}

# Check if environment name is provided
if [[ -z "${ENV_NAME}" ]]; then
    select_env
fi

if [[ -z "${ENV_NAME}" ]]; then
    echo "No environment selected. Exiting."
    exit 1
fi

matches=()
exact_match=""

for env in "${env_array[@]}"; do
    if [[ "$env" == "${ENV_NAME}" ]]; then
        exact_match="$env"
        break
    elif [[ "$env" == *"${ENV_NAME}"* ]]; then
        matches+=("$env")
    fi
done

# If there is an exact match, connect to it
if [[ -n "$exact_match" ]]; then
    connect_to_env "$exact_match"
elif [[ ${#matches[@]} -gt 0 ]]; then
    # Display menu of matching entries
    echo "Select an environment:"
    select env in "${matches[@]}"; do
        if [[ -n "$env" ]]; then
            connect_to_env "$env"
            break
        else
            echo "Invalid selection. Please try again."
        fi
    done
else
    echo "No matching environments found. Exiting."
    exit 1
fi

cd "${OHOME}"