cd $DB_PROVISIONER_HOME

usage() {
    echo "Usage: $(basename "$0") -e <environment> -d <database>"
    echo "Environment options: cert, dev, inf-dev, prod, test"
    exit 1
}

while getopts "e:d:h" opt; do
    case ${opt} in
        e)
            ENV=$OPTARG
            ;;
        d)
            DB_NAME=$(sed 's/-/_/g' <<< $OPTARG)
            SSM_DB_NAME=$(sed 's/_/-/g' <<< $OPTARG)
            ;;
        h)
            usage
            ;;
        \?)
            usage
            ;;
    esac
done

# Validate required arguments
if [[ -z $ENV ]] || [[ -z $DB_NAME ]]; then
    usage
fi

# Validate environment
case "$ENV" in
    cert|dev|inf-dev|prod|test)
        # Read the config and set environment variables
        while IFS=': ' read -r key value; do
            if [[ -n $value ]]; then
                key=$(echo "$key" | tr '[:lower:]' '[:upper:]' | tr '-' '_')
                export "$key"="$value"
            fi
        done < <(grep -A3 'parent:' "envs/${ENV}"* | grep -v parent | sed 's/^[[:space:]]*//')
        ;;
    *)
        echo "Invalid environment: $ENV"
        usage
        ;;
esac

AWS_MAX_ATTEMPTS=10
AWS_RETRY_MODE=adaptive
creds=($(aws-vault exec $AWS_ACCOUNT_NAME.AdministratorAccess -- aws ssm get-parameters-by-path --path "/${SSM_DB_NAME}/database" --recursive --with-decryption --query "Parameters[].{Name:Name, Value:Value}" --output text --region ${AWS_REGION} | sed 's/\t/=/g'))

for cred in "${creds[@]}"; do
    if [[ $cred == *"admin"* || $cred == *"primary-host"* ]]; then
        key=$(cut -d'=' -f1 <<< $cred | awk -F'/' '{print $NF}' | tr '-' '_')
        value=$(cut -d'=' -f2 <<< $cred)
        export $key=$value
    fi
done

export PGUSER=${username}
export PGPASSWORD=${password}
export PGHOST=${primary_host}
export PGPORT=5432

echo "Connection parameters:"
echo "PGUSER=${username}"
echo "PGPASSWORD=${password}"
echo "PGHOST=${primary_host}"
echo "PGPORT=5432"


echo "Connecting to: ${PGUSER}@${DB_NAME} in ${ENV}"

    if [[ -n "$ITERM_PROFILE" ]]; then
        echo -ne "\033]0;PG: ${ENV}: ${PGHOST}\007"
    fi
    if [[ "$env" == *"prod"* ]]; then
        pgcli --prompt "\x1b[1;31m[${ENV}] \u@\d>\x1b[0m " -d "${DB_NAME}"
    elif [[ "$env" == *"local"* ]]; then
        pgcli --prompt "\x1b[1;36m[${ENV}] \u@\d>\x1b[0m " -d "${DB_NAME}"
    else
        pgcli --prompt "\x1b[1;32m[${ENV}] \u@\d>\x1b[0m " -d "${DB_NAME}"
    fi

cd -
# clear the iterm title
if [[ -n "$ITERM_PROFILE" ]]; then
    echo -ne "\033]0;\007"
fi