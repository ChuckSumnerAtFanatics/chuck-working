#!/bin/bash

# Load functions
source pss2_functions.sh

connect_to_env() {
    local env="$1"
    echo "$env ${DB_USER}@${instance}"
    export $(fbg postgres credentials get --skip-refresh --skip-test --env "$env" --user "${DB_USER}" "${instance}")

    # If export only flag is set, print export commands and exit
    if [[ "$EXPORT_ONLY" == true ]]; then
        echo "PGUSER=${DB_USER}"
        echo "PGPASSWORD=${PGPASSWORD}"
        echo "PGHOST=${PGHOST}"
        echo "PGPORT=5432"
        echo "PGDATABASE=${DB_NAME}"
        exit 0
    fi

    if [[ -n "$ITERM_PROFILE" ]]; then
        echo -ne "\033]0;PG: ${env}: ${instance}\007"
    fi
    
    if [[ "$USE_PSQL" == true ]]; then
        # Use psql with appropriate prompt colors
        if [[ "$env" == *"prod"* ]]; then
            psql --set=PROMPT1="%[%033[1;31m%][${env}] %n@%/%R%#%[%033[0m%] " -d "${DB_NAME}" -U "${DB_USER}"
        elif [[ "$env" == *"local"* ]]; then
            psql --set=PROMPT1="%[%033[1;36m%][${env}] %n@%/%R%#%[%033[0m%] " -d "${DB_NAME}" -U "${DB_USER}"
        else
            psql --set=PROMPT1="%[%033[1;32m%][${env}] %n@%/%R%#%[%033[0m%] " -d "${DB_NAME}" -U "${DB_USER}"
        fi
    else
        if [[ "$env" == *"prod"* ]]; then
            pgcli --prompt "\x1b[1;31m[${env}] \u@\d>\x1b[0m " -d "${DB_NAME}" -U "${DB_USER}" -h "${PGHOST}" -p "${PGPORT}"
        elif [[ "$env" == *"local"* ]]; then
            pgcli --prompt "\x1b[1;36m[${env}] \u@\d>\x1b[0m " -d "${DB_NAME}" -U "${DB_USER}" -h "${PGHOST}" -p "${PGPORT}"
        else
            pgcli --prompt "\x1b[1;32m[${env}] \u@\d>\x1b[0m " -d "${DB_NAME}" -U "${DB_USER}" -h "${PGHOST}" -p "${PGPORT}"
        fi
    fi
}

DB_USER="postgres"
DB_NAME="postgres"
COLUMNS=$(tput cols)
USE_PSQL=false
EXPORT_ONLY=false
SELECT_USER=false

# Parse arguments
usage() {
    cat << EOF
Usage: $0 [OPTIONS] [environment]

Options:
    -d, --database      Database to connect to (default: postgres)
    -p, --psql          Use psql client instead of pgcli
    -e, --export        Print export commands for credentials and exit
    -u, --user          Show user selection dialog (default: use postgres user)
    -h, --help          Show this help message

Arguments:
    environment         Full or partial environment name to connect to
EOF
    exit 0
}

# Parse arguments
while [[ $# -gt 0 ]]; do
    case "$1" in
        -d|--database)
            if [[ -z "$2" ]]; then
                echo "Error: --database requires an argument" >&2
                usage
                exit 1
            fi
            DB_NAME="$2"
            shift 2
            ;;
        -p|--psql)
            USE_PSQL=true
            shift
            ;;
        -e|--export)
            EXPORT_ONLY=true
            shift
            ;;
        -u|--user)
            SELECT_USER=true
            shift
            ;;
        -h|--help)
            usage
            ;;
        -*)
            echo "Unknown option: $1" >&2
            usage
            exit 1
            ;;
        *)
            ENV_NAME="$1"
            shift
            ;;
    esac
done


    # If export only flag is set, print export commands and exit
    if [[ "$EXPORT_ONLY" == true ]]; then
        echo "PGUSER=${DB_USER}"
        echo "PGPASSWORD=${PGPASSWORD}"
        echo "PGHOST=${PGHOST}"
        echo "PGPORT=5432"
        echo "PGDATABASE=${DB_NAME}"
        exit 0
    fi

    if [[ -n "$ITERM_PROFILE" ]]; then
        echo -ne "\033]0;PG: ${env}: ${instance}\007"
    fi

# Get credentials list as JSON
CREDS_LIST=$(fbg postgres credentials list --skip-refresh --output-format json)

env_array=()
while IFS= read -r line; do
    [[ -n "$line" ]] && env_array+=("$line")
done < <(echo "$CREDS_LIST" | jq -r '.[].env' | sort -u)

# Check if environment name is provided
if [[ -z "${ENV_NAME}" ]]; then
    display_menu
else
    matches=()
    exact_match=""

    for env in "${env_array[@]}"; do
        if ([[ "$env" == "${ENV_NAME}" ]]); then
            exact_match="$env"
            break
        elif [[ "$env" == *"${ENV_NAME}"* ]]; then
            matches+=("$env")
        fi
    done

    # If there is an exact match, connect to it
    if [[ -n "$exact_match" ]]; then
        select_instance "$exact_match"
    elif [[ ${#matches[@]} -gt 0 ]]; then
        # Display menu of matching entries
        echo "Select an environment:"
        select env in "${matches[@]}"; do
            if [[ -n "$env" ]]; then
                select_instance "$env"
                break
            else
                echo "Invalid selection. Please try again."
            fi
        done
    else
        echo "No matching environments found for: ${ENV_NAME}" >&2
        exit 1
    fi
fi

if [[ -n "$ITERM_PROFILE" ]]; then
    echo -ne "\033]0;\007"
fi
