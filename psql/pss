#!/bin/bash

# Parse arguments
usage() {
    cat << EOF
Usage: pss [OPTIONS] [environment]

Options:
    -d, --database      Database to connect to (default: postgres)
    -h, --help          Show this help message
    -u, --user USER     Database user (default: postgres)
    -p, --psql          Use psql instead of pgcli

Arguments:
    environment         Full or partial environment name to connect to
EOF
    exit 0
}

# Initialize variables
DB_USER="postgres"
DB_NAME="postgres"
ENV_NAME=""
USE_PSQL=false

# Parse arguments
while [[ $# -gt 0 ]]; do
    case "$1" in
        -d|--database)
            if [[ -z "$2" ]]; then
                echo "Error: --database requires an argument" >&2
                usage
                exit 1
            fi
            DB_NAME="$2"
            shift 2
            ;;
        -h|--help)
            usage
            ;;
        -u|--user)
            if [[ -z "$2" ]]; then
                echo "Error: --user requires an argument" >&2
                usage
                exit 1
            fi
            DB_USER="$2"
            shift 2
            ;;
        -p|--psql)
            USE_PSQL=true
            shift
            ;;
        -*)
            echo "Unknown option: $1" >&2
            usage
            exit 1
            ;;
        *)
            ENV_NAME="$1"
            shift
            ;;
    esac
done

# # Get the current directory
OHOME=$(pwd)

# Set the terminal width
COLUMNS=$(tput cols)

# Set this env var to the path of db_provisioner
if [ -z "${DB_PROVISIONER_HOME}" ]; then
    echo "Error: DB_PROVISIONER_HOME environment variable must be set" >&2
    exit 1
fi
cd "${DB_PROVISIONER_HOME}"

# Get environment names and build array efficiently
env_array=($(fbg postgres credentials list --skip-refresh | awk '!/---|Env/ && NF {print $8}' | sort -u))
# while IFS= read -r line; do
#     [[ -n "$line" ]] && env_array+=("$line")
# done < <(grep -h 'environment_name:' "${DB_PROVISIONER_HOME}/envs/"* | 
#         cut -d':' -f2 | 
#         sed 's/^ *//g' |
#         grep -Ev 'data-compute' |
#         sort)

# Function to connect to the environment
connect_to_env() {
    local env="$1"
    echo "Connecting to: $env ${DB_USER}@${DB_NAME}"
    export $(fbg postgres credentials get --skip-refresh --skip-test --env "$env" --user "${DB_USER}" "${env}")
    env | grep PG

    if [[ -n "$ITERM_PROFILE" ]]; then
        echo -ne "\033]0;PG: ${env}: ${DB_USER}@${DB_NAME}\007"
    fi
    
    if [[ "$USE_PSQL" == true ]]; then
        # Use psql with appropriate prompt colors
        if [[ "$env" == *"prod"* ]]; then
            psql --set=PROMPT1="%[%033[1;31m%][${env}] %n@%/%R%#%[%033[0m%] "
        elif [[ "$env" == *"local"* ]]; then
            psql --set=PROMPT1="%[%033[1;36m%][${env}] %n@%/%R%#%[%033[0m%] "
        else
            psql --set=PROMPT1="%[%033[1;32m%][${env}] %n@%/%R%#%[%033[0m%] "
        fi
    else
        # Use pgcli (default)
        if [[ "$env" == *"prod"* ]]; then
            pgcli --prompt "\x1b[1;31m[${env}] \u@\d>\x1b[0m "
        elif [[ "$env" == *"local"* ]]; then
            pgcli --prompt "\x1b[1;36m[${env}] \u@\d>\x1b[0m "
        else
            pgcli --prompt "\x1b[1;32m[${env}] \u@\d>\x1b[0m "
        fi
    fi
}

# Function to display menu of all environments
display_menu() {
    echo "Select an environment:"
    select env in "${env_array[@]}"; do
        if [[ -n "$env" ]]; then
            connect_to_env "$env"
            break
        else
            echo "Invalid selection. Please try again."
        fi
    done
}

# Check if environment name is provided
if [[ -z "${ENV_NAME}" ]]; then
    display_menu
else
    matches=()
    exact_match=""

    for env in "${env_array[@]}"; do
        if [[ "$env" == "${ENV_NAME}" ]]; then
            exact_match="$env"
            break
        elif [[ "$env" == *"${ENV_NAME}"* ]]; then
            matches+=("$env")
        fi
    done

    # If there is an exact match, connect to it
    if [[ -n "$exact_match" ]]; then
        connect_to_env "$exact_match"
    elif [[ ${#matches[@]} -gt 0 ]]; then
        # Display menu of matching entries
        echo "Select an environment:"
        select env in "${matches[@]}"; do
            if [[ -n "$env" ]]; then
                connect_to_env "$env"
                break
            else
                echo "Invalid selection. Please try again."
            fi
        done
    else
        echo "No matching environments found for: ${ENV_NAME}" >&2
        exit 1
    fi
fi

cd "${OHOME}"
# clear the iterm title
if [[ -n "$ITERM_PROFILE" ]]; then
    echo -ne "\033]0;\007"
fi
